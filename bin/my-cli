#! /usr/bin/env    node

const figlet = require('figlet');
const versionStr = figlet.textSync('MyCli');
const Printer = require('@darkobits/lolcatjs');
const _version = require('../package.json').version;
const input = `\n脚手架工具${_version}\n${Printer.default.fromString(versionStr)}`;
const transformed = Printer.default.fromString(input);
const chalk = require('chalk');
const inquirer = require('inquirer');
const shell = require('shelljs');
const ora = require('ora');
const download = require('download-git-repo');

const {
    program
} = require('commander');
program.version(transformed);
// console.log(transformed);
program
    .option('-d, --debug', 'output extra debugging');
program
    .option('c, create', '初始化项目', 'blue');

const dictionary = {
    create(env) {
        inquirer
            .prompt([
                {
                    type:  'text',
                    message: '请输入项目名称',
                    name:'dirname'
                },{
                    type:  'list',
                    message: '请选择开发语言',
                    name:'jskind',
                    choices: [ "Typescript", "Javascript" ]
                }
                /* Pass your questions in here */
            ])
            .then(answers => {
                // Use user feedback for... whatever!!
                const _pwd = shell.pwd().stdout;
                const projectPath = `${_pwd}/${answers.dirname}`;
                shell.rm('-rf', projectPath);//删除重名文件夹
                shell.mkdir(projectPath);
                const spinner = ora('downLoading template....').start();
                const template = 'direct:https://github.com/HeLuchao/vuecli3.0_template.git';
                download(template, projectPath, {clone:true},function (err) {
                    spinner.stop();
                    if (err) {
                        console.log(chalk.red('下载失败'));
                    } else {
                        shell.sed('-i', '', answers.dirname,projectPath+'/package.json');
                        console.log(chalk.green('下载成功'));
                    }
                });
            })
            .catch(error => {
                if (error.isTtyError) {
                    // Prompt couldn't be rendered in the current environment
                } else {
                    // Something else when wrong
                }
            });
    }
};

program
    .usage("[cmd] options")
    .arguments("<cmd> [env]")
    .action((cmd, env) => {
        const handler = dictionary[cmd];
        if (handler) {
            handler(env);
        } else {
            console.log(chalk.blue('env'), chalk.red('暂未支持'));
        }
    });


program.parse(process.argv);